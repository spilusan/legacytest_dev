image: aolb/php81-apache-oci:v1 

pipelines:
  default:
    - step:
        script:
          # Build backend
          - echo "*** Install php packages..."
          - composer install
          # build frontent
          - echo "*** Install frontend packages..."
          - npm install
          - gulp build
          #Validate Php syntax
          - echo "*** Validating php syntax..."
          - for file in `find . -name '*.php' | grep -v ./vendor`; do php -l -d display_errors=0 $file; done
          #Validating Js syntax
          - echo "*** Validating Js synatx"
          - jserrors=$(jshint --config ./application/configs/jshint.conf --verbose ./js --exclude js/w2ui-1.3.2.min.js,js/w2ui-1.3.2.js,js/modules/r.2.3.1.js,js/lib/highcharts/lib/svg2pdf.src.js,js/lib/highcharts/lib/svg2pdf.js,js/essm/bootstrap.js,js/lib/flexibility.js,js/modules/jquery.validate.js,js/modules/domReady.js,js/modules/backbone/lib/backbone-deep-model.js | grep -E E[0-9]+.$ | wc -l)
          - if [ $jserrors -gt 0 ]; then exit 1; fi
          #Validating css syntax (only the legacy non-sass-compiled css files)
          - echo "*** Validating Css synatx"          
          - csslint --errors=errors --quiet ./css/ --exclude-list=./css/reports/svr.css,./css/jqModal.css,./css/uniform.default.new.css,./css/uniform.rfq.css,./css/uniform.webreporter.css,./css/myshipserv.css,./css/search.css,./css/supplier/supplier.css,./css/compressed.css,./css/profile/company-blocked-list.css,./css/myshipserv_19_10_09.css,./css/essm/bootstrap.min.css,./css/essm/bootstrap.css
          # PHP code quality report
          #- PROJECT=`pwd`
          #- $PROJECT/vendor/bin/phpcs --config-set installed_paths $PROJECT/vendor,$PROJECT/git-hooks,$PROJECT/vendor/phpcompatibility/php-compatibility;
          #- echo "Php quality report - code sniffing the whole library directory..."
          #- $PROJECT/vendor/bin/phpcs --standard=$PROJECT/application/configs/phpcs-shipserv-ruleset.xml --tab-width=4 --error-severity=4 --warning-severity=6 --colors --ignore="*.js,*.css,*.xml,*.png,*.jpg,*.gif,*.jpeg,*.json,*.svg" -s --report=source $PROJECT/library/ | grep -v "Missing @return tag"
          #- echo "Php quality report - code sniffing the whole application directory..."
          #- $PROJECT/vendor/bin/phpcs --standard=$PROJECT/application/configs/phpcs-shipserv-ruleset.xml --tab-width=4 --error-severity=4 --warning-severity=6 --colors --ignore="*.js,*.css,*.xml,*.png,*.jpg,*.gif,*.jpeg,*.json,*.svg" -s --report=source $PROJECT/application/ | grep -v "Missing @return tag"
          # PHP version Compatiblity checker
          # -$PROJECT/vendor/bin/phpcs . -d memory_limit=1g --standard=PHPCompatibility --runtime-set testVersion 8.1 --ignore="*.js,*.css,*.xml,*.png,*.jpg,*.gif,*.jpeg,*.json,*.svg" -s --report=source $PROJECT/library/
          # Standard code analysis
          # - ./vendor/bin/phpstan analyse application --memory-limit 1G
          # - ./vendor/bin/phpstan analyse library --memory-limit 1G
  tags:
    "deploy-uat*":
       - step:
           name: Build UAT
           image: atlassian/default-image:2
           deployment: test 
           services:
             - docker
           script: 
             - echo "*** Build deployment container..."
             - # TODO implement docker login
             - docker build -t pages -f Dockerfile.deploy-dev .
             - echo "*** Push deployment container..."
             - # docker tag pages:latest <registry url>
             - # docker push <registry url>
             - echo "*** Deploying..."
             - # TODO initiate deployment on VPS
             - echo "*** Done."
  tags:
    "deploy-prod*":
       - step:
           name: Build UAT
           image: atlassian/default-image:2
           deployment: production 
           services:
             - docker
           script: 
             - echo "*** Build deployment container..."
             - # TODO implement docker login
             - docker build -t pages -f Dockerfile.deploy-prod .
             - echo "*** Push deployment container..."
             - # docker tag pages:latest <registry url>
             - # docker push <registry url>
             - echo "*** Deploying..."
             - # TODO initiate deployment on VPS
             - echo "*** Done."
